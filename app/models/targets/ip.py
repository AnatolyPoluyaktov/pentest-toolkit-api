from sqlalchemy import (Boolean, Column, ForeignKey, Integer, String, Table,
                        UniqueConstraint)
from sqlalchemy.orm import relationship

from app.db.base_class import Base
from app.utils.mixins import TimestampMixin

ip_domain = Table(
    "ip_domain",
    Base.metadata,
    Column("ip_id", Integer, ForeignKey("ip.id", ondelete="CASCADE")),
    Column("domain_id", Integer, ForeignKey("domain.id", ondelete="CASCADE")),
)


class Ip(TimestampMixin, Base):
    ip = Column(String, nullable=True)
    domains = relationship(
        "Domain", cascade="delete, all", secondary=ip_domain, back_populates="ips"
    )
    subdomains = relationship("SubDomain", cascade="delete, all", back_populates="ip")
    services = relationship("Service", cascade="delete, all", back_populates="ip")
    __table_args__ = (UniqueConstraint("ip", "project_id", name="unique_ip"), {})
    is_approved = Column(Boolean, default=True)
    is_scanned = Column(Boolean, default=False)
    project_id = Column(Integer, ForeignKey("project.id", ondelete="CASCADE"))
    project = relationship("Project", back_populates="domains")
    subnet_id = Column(Integer, ForeignKey("subnet.id", ondelete="CASCADE"))
    subnet = relationship("Subnet", back_populates="ips")
    netname = Column(String, nullable=True)
