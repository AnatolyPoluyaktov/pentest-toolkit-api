from sqlalchemy import (Boolean, Column, ForeignKey, Integer, String, Table,
                        UniqueConstraint)
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import INET, CIDR
from app.db.base_class import Base
from app.utils.mixins import TimestampMixin
ip_domain = Table(
    "ip_domain",
    Base.metadata,
    Column("ip_id", Integer, ForeignKey("ip.id", ondelete="CASCADE")),
    Column("domain_id", Integer, ForeignKey("domain.id", ondelete="CASCADE")),
)
from pydantic.networks import IPv4Address, IPv6Address
from psycopg2.extensions import register_adapter, AsIs

def adapt_pydantic_ip_address(ip):
    return AsIs(repr(ip.exploded))
register_adapter(IPv4Address, adapt_pydantic_ip_address)
register_adapter(IPv6Address, adapt_pydantic_ip_address)


class Ip(TimestampMixin, Base):
    ip = Column(INET)
    domains = relationship(
        "Domain", cascade="delete, all", secondary=ip_domain, back_populates="ips"
    )
    subdomains = relationship("Subdomain", secondary="subdomain_ips",  back_populates="ips")
    services = relationship("Service", cascade="delete, all", back_populates="ip")
    __table_args__ = (UniqueConstraint("ip", "project_id", name="unique_ip"), {})
    is_approved = Column(Boolean, default=True)
    is_scanned = Column(Boolean, default=False)
    project_id = Column(Integer, ForeignKey("project.id", ondelete="CASCADE"))
    project = relationship("Project", back_populates="ips")
    subnet_id = Column(Integer, ForeignKey("subnet.id", ondelete="CASCADE"))
    subnet = relationship("Subnet", back_populates="ips")
    netname = Column(String, nullable=True)
