from sqlalchemy import (Boolean, Column, ForeignKey, Integer, String, Table,
                        UniqueConstraint)
from sqlalchemy.orm import relationship

from app.db.base_class import Base
from app.utils.mixins import TimestampMixin


class Vulnerability(TimestampMixin, Base):
    name = Column(String, nullable=True)
    description = Column(String, nullable=True)
    severity = Column(String, nullable=True)
    solution = Column(String, nullable=True)
    reference = Column(String, nullable=True)
    cvss = Column(String, nullable=True)
    cvss_vector = Column(String, nullable=True)
    cvss_score = Column(String, nullable=True)
    cvss_severity = Column(String, nullable=True)
    cvss_version = Column(String, nullable=True)
    cwe = Column(String, nullable=True)
    cve = Column(String, nullable=True)
    poc = Column(String, nullable=True)
    is_exploitable = Column(Boolean, default=False)
    is_verified = Column(Boolean, default=False)
    is_false_positive = Column(Boolean, default=False)
    service_id = Column(Integer, ForeignKey("service.id", ondelete="CASCADE"))
    service = relationship("Service", back_populates="vulnerabilities")

    __table_args__ = (
        UniqueConstraint(
            "name", "service_id", "project_id", name="unique_vulnerability"
        ),
        {},
    )
    is_approved = Column(Boolean, default=True)
    is_scanned = Column(Boolean, default=False)
    project_id = Column(Integer, ForeignKey("project.id", ondelete="CASCADE"))
    project = relationship("Project", back_populates="vulnerabilities")
