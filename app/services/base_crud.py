from typing import Any, Dict, Generic, List, Optional, Type, TypeVar, Union

from fastapi import HTTPException, status
from pydantic import BaseModel
from sqlalchemy.orm import Session

from app.db.base_class import Base

ModelType = TypeVar("ModelType", bound=Base)
CreateSchemaType = TypeVar("CreateSchemaType", bound=BaseModel)
UpdateSchemaType = TypeVar("UpdateSchemaType", bound=BaseModel)


class BaseCrudService(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):
    def __init__(self, model: Type[ModelType]):
        """
        CRUD object with default methods to Create, Read, Update, Delete (CRUD).
        **Parameters**
        * `model`: A SQLAlchemy model class
        * `schema`: A Pydantic model (schema) class
        """
        self.model = model

    def _get(self, db: Session, object_id: int) -> Optional[ModelType]:
        obj = (
            db.query(self.model)
                .filter(self.model.id == object_id)
                .first()
        )
        if not obj:
            raise HTTPException(status.HTTP_404_NOT_FOUND)
        return obj

    def get(self, db: Session, object_id: int) -> Optional[ModelType]:
        return self._get(db, object_id)

    def get_by(self, db: Session, **kwargs) -> Optional[ModelType]:
        return db.query(self.model).filter_by(**kwargs).first()

    def list(
            self, db: Session, skip: int = 0, limit: int = 100
    ) -> List[ModelType]:
        return db.query(self.model).offset(skip).limit(limit).all()

    def create(self, db: Session, object_data: CreateSchemaType,  **kwargs) -> ModelType:
        obj = self.get_by(db, **kwargs)
        if obj:
            return obj
        obj = self.model(**object_data.dict())  # type: ignore
        db.add(obj)
        db.commit()
        db.refresh(obj)
        return obj

    def update(
            self,
            db: Session,
            *,
            object_id: ModelType,
            object_data: Union[UpdateSchemaType, Dict[str, Any]]
    ) -> ModelType:
        obj = self._get(db, object_id)

        for field, value in object_data:
            setattr(obj, field, value)
        db.commit()
        db.refresh(obj)
        return obj

    def remove(self, db: Session, object_id: int) -> ModelType:
        obj = self._get(db, object_id)
        db.delete(obj)
        db.commit()
        return obj
