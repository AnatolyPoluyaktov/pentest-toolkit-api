from typing import Generic, List, Optional, Type, TypeVar

from fastapi import HTTPException, status
from pydantic import BaseModel

from app.db.base_class import Base
from app.services.base import BaseDBService

ModelType = TypeVar("ModelType", bound=Base)
CreateSchemaType = TypeVar("CreateSchemaType", bound=BaseModel)
UpdateSchemaType = TypeVar("UpdateSchemaType", bound=BaseModel)


class BaseCrud(BaseDBService, Generic[ModelType, CreateSchemaType, UpdateSchemaType]):
    def __init__(self, model: Type[ModelType]):

        """
        CRUD object with default methods to Create, Read, Update, Delete (CRUD).

        **Parameters**

        * `model`: A SQLAlchemy model class
        * `schema`: A Pydantic model (schema) class
        """
        super().__init__()
        self.model = model

    def _get(self, entity_id: int) -> Optional[ModelType]:
        entity = (
            self.session.query(self.model).filter(self.model.id == entity_id)
        ).first()
        if not entity:
            raise HTTPException(status.HTTP_404_NOT_FOUND, detail="Entity not found")
        return entity

    def get(self, entity_id: id) -> Optional[ModelType]:
        return self._get(entity_id)

    def get_many(self, *, skip: int = 0, limit: int = 100) -> List[ModelType]:
        return self.session.query(self.model).offset(skip).limit(limit).all()

    def list(self) -> List[ModelType]:
        return self.session.query(self.model).all()

    def create(self, *, obj: CreateSchemaType) -> ModelType:
        db_obj = self.model(**obj.dict())  # type: ignore
        self.session.add(db_obj)
        self.session.commit()
        self.session.refresh(db_obj)
        return db_obj

    def update(self, *, entity_id: int, obj: UpdateSchemaType) -> ModelType:
        db_obj = self._get(entity_id)
        for field, value in obj:
            setattr(db_obj, field, value)
        self.session.add(db_obj)
        self.session.commit()
        self.session.refresh(db_obj)
        return db_obj

    def remove(self, *, entity_id: int) -> ModelType:
        obj = self._get(entity_id)
        self.session.delete(obj)
        self.session.commit()
        return obj
