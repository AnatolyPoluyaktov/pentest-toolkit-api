from fastapi import Depends
from sqlalchemy.orm import Session

from app.utils.deps import get_db


class BaseDBService:
    def __init__(self, session: Session = Depends(get_db)):
        self.session = session

    def get_or_create(self, model, defaults=None, **kwargs):
        instance = self.session.query(model).filter_by(**kwargs).one_or_none()
        if instance:
            return instance, False
        else:
            kwargs |= defaults or {}
            instance = model(**kwargs)
            try:
                self.session.add(instance)
                self.session.commit()
            except Exception:  # The actual exception depends on the specific database so we catch all exceptions. This is similar to the official documentation: https://docs.sqlalchemy.org/en/latest/orm/session_transaction.html
                self.session.rollback()
                instance = self.session.query(model).filter_by(**kwargs).one()
                return instance, False
            else:
                return instance, True
