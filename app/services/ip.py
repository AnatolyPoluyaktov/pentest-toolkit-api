from app.services.base_crud import BaseCrudService
from app import schemas
from app import models
from typing import List
from sqlalchemy.orm import Session
from app.schemas import IpCreate
from app.services.project import service_project
from app.models import Ip
from fastapi import HTTPException, status
from app.utils.utils import get_ip_whois
from app.schemas import IpwithWhois
from typing import Optional


class ServiceIp(BaseCrudService):
    def _create_ip(self, db: Session, object_data: IpCreate, **kwargs) -> Ip:
        project = service_project.get(db, object_data.project_id)
        if not project:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Project not found",
            )
        ip = self.get_by(db, **kwargs)
        if not ip:
            ip_with_whois: IpwithWhois = get_ip_whois(object_data)
            ip = Ip(
                **ip_with_whois.dict(),
            )
        return ip

    def create(self, db: Session, object_data: IpCreate, **kwargs) -> Ip:
        try:
            ip = self._create_ip(db, object_data, **kwargs)
        except Exception as e:
            db.rollback()
            raise
        db.add(ip)
        db.commit()
        db.refresh(ip)
        return ip

    def bulk_create(self, db: Session, object_data: List[IpCreate]) -> List[Ip]:
        try:
            ips = []
            for ip in object_data:
                ips.append(self._create_ip(db, ip))

        except Exception as err:
            db.rollback()
            raise
        db.add_all(ips)
        return ips


service_ip = ServiceIp(models.Ip)
