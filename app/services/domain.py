from app.models import Domain
from app.schemas import DomainCreate, DomainUpdate

from app.services.base_crud import BaseCrudService

from fastapi import HTTPException, status

from sqlalchemy.orm import Session
from app.services.project import service_project
from app.utils.utils import get_whois, ips_from_domain, get_ip_whois
from app.services.ip import service_ip
from typing import List, Optional, Any

class DomainService(BaseCrudService[Domain, DomainCreate, DomainUpdate]):

    def create(self, db: Session, object_data: DomainCreate,**kwargs) -> Domain:

        try:
            obj = self.get_by(db,**kwargs)
            if obj:
                return obj
            project = service_project.get(db, object_data.project_id)
            if not project:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Project not found",
                )

            ips = ips_from_domain(object_data.domain, project_id=object_data.project_id)

            if not ips:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Domain has no ips",
                )
            ips = service_ip.bulk_create(db, ips)
            domain = Domain(
                domain=object_data.domain,
                project_id=object_data.project_id,
                whois_org=get_whois(object_data.domain),
                ips=ips,
            )

        except Exception as e:
            db.rollback()
            raise

        db.add(domain)
        db.commit()
        db.refresh(domain)

        return domain


domain_service = DomainService(Domain)
