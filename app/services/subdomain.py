from app.models import Subdomain, Project, Domain
from app.schemas import SubdomainCreate, SubdomainUpdate

from app.services.base_crud import BaseCrudService
from typing import List, Optional
from fastapi import HTTPException, status
from sqlalchemy.orm import Session
from app.services.project import service_project
from app.utils.utils import ips_from_domain
from app.services.ip import service_ip


class SubDomainService(BaseCrudService[Subdomain, SubdomainCreate, SubdomainUpdate]):
    @staticmethod
    def _get_project(db: Session, project_id: int) -> Project:
        project = service_project.get(db, project_id)
        if not project:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Project not found",
            )
        return project

    def _get_domain(self, db: Session, domain_id: int) -> Subdomain:
        domain = db.query(Domain).filter(Domain.id == domain_id).first()
        if not domain:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Domain not found",
            )
        return domain

    def get_by(self, db: Session, **kwargs) -> Optional[Subdomain]:
        domain = db.query(Domain).filter(Domain.id == kwargs["domain_id"]).first()
        if not domain:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Domain not found",
            )
        if domain.project_id != kwargs["project_id"]:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Domain and subdomains has different project",
            )
        return db.query(Subdomain).filter_by(**kwargs).first()

    def create(self, db: Session, object_data: SubdomainCreate, **kwargs) -> Subdomain:
        try:
            obj = self.get_by(db, **kwargs)
            if obj:
                return obj
            domain = self._get_domain(db, object_data.domain_id)
            ips = ips_from_domain(object_data.subdomain, project_id=object_data.project_id)

            if not ips:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="subdomain has no ips",
                )
            ips = service_ip.bulk_create(db, ips)
            domain = Subdomain(
                subdomain=object_data.subdomain,
                domain=domain,
                project=domain.project,
                ips=ips,
            )

        except Exception as e:
            db.rollback()
            raise

        db.add(domain)
        db.commit()
        db.refresh(domain)

        return domain


subdomain_service = SubDomainService(Subdomain)
