from datetime import datetime, timedelta

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.hash import bcrypt
from pydantic import ValidationError

from app import models, schemas
from app.core.config import settings
from app.models.user import Roles, User
from app.services.base import BaseDBService

oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl=f"{settings.api_prefix}/auth/access-token/"
)


def get_current_user(token: str = Depends(oauth2_scheme)) -> schemas.UserWithRole:
    return AuthService.verify_token(token)


def get_current_active_superuser(
    current_user: schemas.UserWithRole = Depends(get_current_user),
) -> schemas.UserWithRole:
    if not AuthService.is_superuser(current_user):
        raise HTTPException(
            status_code=400, detail="The user doesn't have enough privileges"
        )
    return current_user


class AuthService(BaseDBService):
    @classmethod
    def verify_password(cls, plain_password: str, hashed_password: str) -> bool:
        return bcrypt.verify(plain_password, hashed_password)

    @classmethod
    def hash_password(cls, password: str) -> str:
        return bcrypt.hash(password)

    @classmethod
    def verify_token(cls, token: str) -> schemas.UserWithRole:
        exception = HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
        try:
            payload = jwt.decode(
                token,
                settings.jwt_secret,
                algorithms=[settings.jwt_algorithm],
            )
        except JWTError:
            raise exception from None

        user_data = payload.get("user")

        try:
            user = schemas.UserWithRole.parse_obj(user_data)
        except ValidationError:
            raise exception from None

        return user

    @classmethod
    def create_token(cls, user: models.User) -> schemas.Token:
        user_data = schemas.UserWithRole.from_orm(user)
        now = datetime.utcnow()
        payload = {
            "iat": now,
            "nbf": now,
            "exp": now + timedelta(seconds=settings.jwt_expires_s),
            "sub": str(user_data.id),
            "user": user_data.dict(),
        }
        token = jwt.encode(
            payload,
            settings.jwt_secret,
            algorithm=settings.jwt_algorithm,
        )
        return schemas.Token(access_token=token)

    def register_new_user(
        self,
        user_data: schemas.UserCreate,
    ) -> schemas.Token:
        if (
            self.session.query(models.User)
            .filter(models.User.username == user_data.username)
            .first()
            is not None
        ):
            raise HTTPException(
                status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                detail="This username already exist",
            )
        user = User(hashed_password=self.hash_password(user_data.password), **user_data.dict())  # type: ignore
        self.session.add(user)
        self.session.commit()

        return self.create_token(user)

    def authenticate_user(
        self,
        email: str,
        password: str,
    ) -> schemas.Token:
        exception = HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )

        user = (
            self.session.query(models.User).filter(models.User.email == email).first()
        )

        if not user:
            raise exception

        if not self.verify_password(password, user.password_hash):
            raise exception

        return self.create_token(user)

    @classmethod
    def is_superuser(cls, user: schemas.UserWithRole) -> bool:
        return user.role == Roles.admin
