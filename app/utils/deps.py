from typing import Generator
from app.db.session import SessionLocal
from fastapi.security import OAuth2PasswordBearer
from app.core.config import settings
from fastapi import Depends, HTTPException
from app.services.auth import AuthService
from app import schemas


def get_db() -> Generator:
    db = None
    try:
        db = SessionLocal()
        yield db
    finally:
        db.close()


oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl=f"{settings.api_prefix}/auth/access-token/"
)


def get_current_user(token: str = Depends(oauth2_scheme)) -> schemas.UserWithRole:
    return AuthService.verify_token(token)


def get_current_active_superuser(
        current_user: schemas.UserWithRole = Depends(get_current_user),
) -> schemas.UserWithRole:
    if not AuthService.is_superuser(current_user):
        raise HTTPException(
            status_code=400, detail="The user doesn't have enough privileges"
        )
    return current_user
